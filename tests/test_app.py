from evopt.app import app


def test_charge_schedule():
    """
    Test the /optimize endpoint of the EV optimization API.
    This test checks if the endpoint correctly processes a sample input
    and returns the expected output structure.
    """

    client = app.test_client()

    # Sample input data
    input_data = {
        "batteries": [
            {
                "c_max": 0,
                "c_min": 4140,
                "charge_from_grid": True,
                "d_max": 0,
                "p_a": 0.00023102658,
                "s_initial": 0,
                "s_max": 0,
                "s_min": 0,
            },
            {
                "c_max": 6000,
                "c_min": 0,
                "charge_from_grid": True,
                "d_max": 6000,
                "p_a": 0.00023102658,
                "s_initial": 7821,
                "s_max": 9405,
                "s_min": 1980,
            },
        ],
        "eta_c": 0.9,
        "eta_d": 0.9,
        "strategy": {"charging_strategy": "charge_before_export"},
        "time_series": {
            "dt": [
                289,
                3600,
                3600,
                3600,
                3600,
                3600,
                3600,
                3600,
                3600,
                3600,
                3600,
                3600,
                3600,
                3600,
                3600,
                3600,
                3600,
                3600,
                3600,
                3600,
                3600,
                3600,
                3600,
                3600,
                3600,
                3600,
                3600,
                3600,
            ],
            "ft": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                32.045586,
                716.11475,
                1456.979,
                1777.417,
                2469.0002,
                2913.028,
                3283.9883,
                3273.1274,
                2950.4023,
                2524.7175,
                1419.3682,
                437.32205,
                29.943062,
                0,
                0,
                0,
                0,
            ],
            "gt": [
                42.473015,
                366.74527,
                376.45816,
                322.89352,
                287.06955,
                309.419,
                281.49448,
                326.74652,
                409.30048,
                390.50632,
                542.97003,
                593.7388,
                921.85114,
                1280.543,
                1258.0083,
                1256.8755,
                826.919,
                639.1874,
                654.6756,
                627.13275,
                776.843,
                760.74335,
                769.26044,
                711.29553,
                509.67618,
                366.74527,
                376.45816,
                322.89352,
            ],
            "p_E": [
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
                0.000088893,
            ],
            "p_N": [
                0.0003174206,
                0.0003026408,
                0.000289289,
                0.0002814945,
                0.0002757944,
                0.0002731883,
                0.0002721411,
                0.0002722125,
                0.0002726528,
                0.0002846242,
                0.0003281901,
                0.0004318629,
                0.0003661868,
                0.0003128153,
                0.0002749138,
                0.0002686544,
                0.0002612288,
                0.0002592891,
                0.0002667266,
                0.0002715699,
                0.0002865401,
                0.000335104,
                0.0005277174,
                0.0006516321,
                0.0003670079,
                0.0003149454,
                0.0002964409,
                0.0002790431,
            ],
        },
    }

    response = client.post("/optimize/charge-schedule", json=input_data)

    assert response.status_code == 200
    assert response.json["status"] == "Optimal"
